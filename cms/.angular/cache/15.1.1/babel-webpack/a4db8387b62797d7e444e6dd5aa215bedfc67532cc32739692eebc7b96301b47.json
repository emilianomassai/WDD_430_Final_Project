{"ast":null,"code":"import { EventEmitter } from '@angular/core';\n// import { MOCKCONTACTS } from './MOCKCONTACTS';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContactService {\n  constructor(http) {\n    this.http = http;\n    this.contactChangedEvent = new EventEmitter();\n    this.contactListChangedEvent = new Subject();\n    this.data = [];\n    this.topRated = [];\n    this.contacts = [];\n    // this.contacts = MOCKCONTACTS;\n    // this.getContacts();\n    this.maxContactId = this.getMaxId();\n  }\n  findTrending() {\n    return this.http.get('https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd');\n  }\n  getContacts() {\n    // // this.http.get<Contact[]>('https://cms-wdd430-58d60-default-rtdb.firebaseio.com/contacts.json')\n    // this.http.get<{ message: string; contacts: Contact[] }>('http://127.0.0.1:4200/contacts')\n    //   .subscribe(\n    //     (contactsData) => {\n    //       this.contacts = contactsData.contacts;\n    //       this.maxContactId = this.getMaxId();\n    //       console.log(contactsData.contacts)\n    //       // this.contacts.sort((a, b) => (a.name < b.name) ? 1 : (a.name > b.name) ? -1 : 0);\n    //       this.contactListChangedEvent.next(this.contacts.slice());\n    //       (error: any) => {\n    //         console.log(error);\n    //       }\n    //     })\n  }\n  // getContacts(): Contact[] { return this.contacts.slice(); }\n  getContact(id) {\n    // const url = 'https://api.themoviedb.org/3/'\n    // const apiKey = 'f4ec058abc3d746728270f736f4851fd'\n    // console.log(\"`${url}contact/${id}?api_key=${apiKey}`\" + `${url}movie/${id}?api_key=${apiKey}`)\n    // return this.http.get(`${url}movie/${id}?api_key=${apiKey}`);\n    const url = 'https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd';\n    this.http.get(url).subscribe(res => {\n      this.data = res;\n      this.topRated = this.data.results;\n      for (let i = 0; i < this.topRated.length; i++) {\n        if (this.topRated[i].id == id) {\n          console.log(\"Movie selected\");\n          console.log(\"Id: \" + this.topRated[i].id);\n          console.log(\"Title: \" + this.topRated[i].title);\n          console.log(\"Overview: \" + this.topRated[i].overview);\n          console.log(\"Poster: \" + this.topRated[i].poster_path);\n          console.log(\"Vote: \" + this.topRated[i].vote_average);\n          console.log(\"Release: \" + this.topRated[i].release_date);\n          console.log('topRated[i]' + this.topRated[i]);\n          return this.topRated[i];\n        }\n      }\n    });\n    return null;\n  }\n  // getContact(id: string): Contact {\n  //   const url = 'https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd'\n  //   this.http.get(url).subscribe((res) => {\n  //     this.data = res\n  //     this.topRated = this.data.results\n  //     for (let i = 0; i < this.topRated.length; i++) {\n  //       if (this.topRated[i].id == id) {\n  //         console.log(\"Movie selected\")\n  //         console.log(\"Id: \" + this.topRated[i].id)\n  //         console.log(\"Title: \" + this.topRated[i].title)\n  //         console.log(\"Overview: \" + this.topRated[i].overview)\n  //         console.log(\"Poster: \" + this.topRated[i].poster_path)\n  //         console.log(\"Vote: \" + this.topRated[i].vote_average)\n  //         console.log(\"Release: \" + this.topRated[i].release_date)\n  //         return this.topRated[i];\n  //       }\n  //     }\n  //   })\n  //   return null!;\n  // }\n  getMaxId() {\n    let maxId = 0;\n    for (const contact of this.contacts) {\n      const currentId = +contact.id;\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n  addContact(newContact) {\n    if (newContact === null || newContact === undefined) {\n      return;\n    }\n    // this.maxContactId++;\n    // newContact.id = this.maxContactId.toString();\n    // this.contacts.push(newContact);\n    // this.storeContacts();\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    newContact.id = '';\n    const strContact = JSON.stringify(newContact);\n    this.http.post('http://127.0.0.1:4200/contacts/', strContact, {\n      headers: headers\n    }).subscribe(() => {\n      this.contactChangedEvent.next(this.contacts.slice());\n    });\n  }\n  updateContact(originalContact, newContact) {\n    if (!originalContact || !newContact) {\n      return;\n    }\n    const pos = this.contacts.findIndex(c => c.id === originalContact.id);\n    // const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n    newContact.id = originalContact.id;\n    // newContact.id = originalContact.id;\n    // this.contacts[pos] = newContact;\n    // this.storeContacts();\n    //set headers\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // const strContact = JSON.stringify(newContact);\n    this.http.patch('http://127.0.0.1:4200/contacts/' + originalContact.id, newContact, {\n      headers: headers\n    }).subscribe(() => {\n      this.contacts[pos] = newContact;\n      this.contactListChangedEvent.next(this.contacts.slice());\n    });\n  }\n  deleteContact(contact) {\n    // if (contact === null || contact === undefined) {\n    //   return;\n    // }\n    // const pos = this.contacts.indexOf(contact);\n    // if (pos < 0) {\n    //   return;\n    // }\n    // // this.contacts.splice(pos, 1);\n    // // this.storeContacts();\n    // this.http.delete('http://127.0.0.1:4200/contacts/' + contact.id)\n    //   .subscribe(\n    //     () => {\n    //       this.contactListChangedEvent.next(this.contacts.slice());\n    //     });\n  }\n  storeContacts() {\n    let contacts = JSON.stringify(this.contacts);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.http.put('https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd', contacts, {\n      headers: headers\n    }).subscribe(() => {\n      this.contactListChangedEvent.next(this.contacts.slice());\n    });\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient));\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","HttpHeaders","Subject","ContactService","constructor","http","maxContactId","getMaxId","findTrending","get","getContacts","getContact","id","url","subscribe","res","data","topRated","results","i","length","console","log","title","overview","poster_path","vote_average","release_date","maxId","contact","contacts","currentId","addContact","newContact","undefined","headers","strContact","JSON","stringify","post","contactChangedEvent","next","slice","updateContact","originalContact","pos","findIndex","c","patch","contactListChangedEvent","deleteContact","storeContacts","put","factory","providedIn"],"sourceRoot":"","sources":["/Users/emilianomassai/Documents/GitHub/WDD_430_Final_Project/cms/src/app/contacts/contact.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\n// import { MOCKCONTACTS } from './MOCKCONTACTS';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Contact } from './contacts.model';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactService {\n  contactChangedEvent = new EventEmitter<Contact[]>();\n\n  contactListChangedEvent = new Subject<Contact[]>();\n\n  maxContactId: number;\n  public data: any = [];\n  public topRated: any = [];\n\n  private contacts: Contact[] = [];\n\n  constructor(private http: HttpClient) {\n    // this.contacts = MOCKCONTACTS;\n    // this.getContacts();\n    this.maxContactId = this.getMaxId();\n  }\n\n\n  findTrending() {\n    return this.http.get('https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd');\n\n  }\n\n  getContacts() {\n\n    // // this.http.get<Contact[]>('https://cms-wdd430-58d60-default-rtdb.firebaseio.com/contacts.json')\n    // this.http.get<{ message: string; contacts: Contact[] }>('http://127.0.0.1:4200/contacts')\n    //   .subscribe(\n    //     (contactsData) => {\n    //       this.contacts = contactsData.contacts;\n    //       this.maxContactId = this.getMaxId();\n    //       console.log(contactsData.contacts)\n\n    //       // this.contacts.sort((a, b) => (a.name < b.name) ? 1 : (a.name > b.name) ? -1 : 0);\n    //       this.contactListChangedEvent.next(this.contacts.slice());\n\n    //       (error: any) => {\n    //         console.log(error);\n    //       }\n    //     })\n  }\n\n  // getContacts(): Contact[] { return this.contacts.slice(); }\n\n\n  getContact(id: string): [] {\n    // const url = 'https://api.themoviedb.org/3/'\n    // const apiKey = 'f4ec058abc3d746728270f736f4851fd'\n    // console.log(\"`${url}contact/${id}?api_key=${apiKey}`\" + `${url}movie/${id}?api_key=${apiKey}`)\n\n    // return this.http.get(`${url}movie/${id}?api_key=${apiKey}`);\n\n\n    const url = 'https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd'\n    this.http.get(url).subscribe((res) => {\n      this.data = res\n      this.topRated = this.data.results\n\n\n      for (let i = 0; i < this.topRated.length; i++) {\n        if (this.topRated[i].id == id) {\n\n          console.log(\"Movie selected\")\n          console.log(\"Id: \" + this.topRated[i].id)\n          console.log(\"Title: \" + this.topRated[i].title)\n          console.log(\"Overview: \" + this.topRated[i].overview)\n          console.log(\"Poster: \" + this.topRated[i].poster_path)\n          console.log(\"Vote: \" + this.topRated[i].vote_average)\n          console.log(\"Release: \" + this.topRated[i].release_date)\n\n          console.log('topRated[i]' + this.topRated[i])\n          return this.topRated[i];\n        }\n      }\n    })\n\n    return null!;\n\n  }\n\n  // getContact(id: string): Contact {\n\n  //   const url = 'https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd'\n  //   this.http.get(url).subscribe((res) => {\n  //     this.data = res\n  //     this.topRated = this.data.results\n\n\n  //     for (let i = 0; i < this.topRated.length; i++) {\n  //       if (this.topRated[i].id == id) {\n\n  //         console.log(\"Movie selected\")\n  //         console.log(\"Id: \" + this.topRated[i].id)\n  //         console.log(\"Title: \" + this.topRated[i].title)\n  //         console.log(\"Overview: \" + this.topRated[i].overview)\n  //         console.log(\"Poster: \" + this.topRated[i].poster_path)\n  //         console.log(\"Vote: \" + this.topRated[i].vote_average)\n  //         console.log(\"Release: \" + this.topRated[i].release_date)\n\n  //         return this.topRated[i];\n  //       }\n  //     }\n  //   })\n\n  //   return null!;\n\n  // }\n\n\n  getMaxId(): number {\n    let maxId = 0;\n    for (const contact of this.contacts) {\n      const currentId = +contact.id;\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n\n  addContact(newContact: Contact) {\n    if (newContact === null || newContact === undefined) {\n      return;\n    }\n\n    // this.maxContactId++;\n    // newContact.id = this.maxContactId.toString();\n    // this.contacts.push(newContact);\n    // this.storeContacts();\n\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    newContact.id = '';\n    const strContact = JSON.stringify(newContact);\n\n    this.http.post('http://127.0.0.1:4200/contacts/', strContact, { headers: headers })\n      .subscribe(\n        () => {\n          this.contactChangedEvent.next(this.contacts.slice());\n        });\n  }\n\n  updateContact(originalContact: Contact, newContact: Contact) {\n    if (!originalContact || !newContact) {\n      return;\n    }\n\n    const pos = this.contacts.findIndex(c => c.id === originalContact.id);\n\n    // const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n\n    newContact.id = originalContact.id;\n\n    // newContact.id = originalContact.id;\n    // this.contacts[pos] = newContact;\n    // this.storeContacts();\n    //set headers\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    // const strContact = JSON.stringify(newContact);\n\n    this.http.patch('http://127.0.0.1:4200/contacts/' + originalContact.id\n      , newContact, { headers: headers })\n      .subscribe(\n        () => {\n          this.contacts[pos] = newContact;\n          this.contactListChangedEvent.next(this.contacts.slice());\n        });\n  }\n\n  deleteContact(contact: Contact) {\n    // if (contact === null || contact === undefined) {\n    //   return;\n    // }\n    // const pos = this.contacts.indexOf(contact);\n\n    // if (pos < 0) {\n    //   return;\n    // }\n    // // this.contacts.splice(pos, 1);\n    // // this.storeContacts();\n    // this.http.delete('http://127.0.0.1:4200/contacts/' + contact.id)\n    //   .subscribe(\n    //     () => {\n    //       this.contactListChangedEvent.next(this.contacts.slice());\n    //     });\n\n  }\n\n  storeContacts() {\n    let contacts = JSON.stringify(this.contacts);\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    this.http.put('https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd', contacts, { headers: headers })\n      .subscribe(\n        () => {\n          this.contactListChangedEvent.next(this.contacts.slice());\n        }\n      )\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}