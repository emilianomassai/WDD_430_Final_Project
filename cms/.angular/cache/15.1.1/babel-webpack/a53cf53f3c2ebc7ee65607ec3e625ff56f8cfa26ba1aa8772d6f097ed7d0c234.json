{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/trendingMovies/trendingMovie.service\";\nexport class MessagesService {\n  constructor(http, trendingMovieService) {\n    this.http = http;\n    this.trendingMovieService = trendingMovieService;\n    this.messageListChangedEvent = new Subject();\n    this.messages = [];\n    this.trendingMovieService.getTrendingMovies();\n    this.getMessages();\n  }\n  getMessages() {\n    // this.http.get<Message[]>('https://cms-wdd430-58d60-default-rtdb.firebaseio.com/messages.json')\n    // this.http.get<Message[]>('http://localhost:3000/messages')\n    this.http.get('http://127.0.0.1:4200/messages').subscribe(messagesData => {\n      this.messages = messagesData.messages;\n      this.maxMessageId = this.getMaxId();\n      console.log(messagesData.messages);\n      // this.messages.sort((a, b) => (a.id < b.id) ? 1 : (a.id > b.id) ? -1 : 0)\n      this.messageListChangedEvent.next(this.messages.slice());\n      error => {\n        console.log(error);\n      };\n    });\n  }\n  getMessage(id) {\n    for (const message of this.messages) {\n      if (message.id === id) {\n        return message;\n      }\n    }\n    return null;\n  }\n  getMaxId() {\n    let maxId = 0;\n    for (const message of this.messages) {\n      const currentId = +message.id;\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n  addMessage(newMessage) {\n    // this.messages.push(message);\n    // this.storeMessages();\n    if (!newMessage) {\n      //exit\n      return;\n    }\n    //set headers\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    //convert object to string to send on request\n    newMessage.id = '';\n    const strMessage = JSON.stringify(newMessage);\n    //send request with object and headers\n    this.http.post('http://127.0.0.1:4200/messages/', strMessage, {\n      headers: headers\n    })\n    //subscribe to response\n    .subscribe(() => {\n      //emit change\n      this.messageListChangedEvent.next(this.messages.slice());\n    });\n  }\n  storeMessages() {\n    let messages = JSON.stringify(this.messages);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.http.put('http://127.0.0.1:4200/messages/', messages, {\n      headers: headers\n    }).subscribe(() => {\n      this.messageListChangedEvent.next(this.messages.slice());\n    });\n  }\n}\nMessagesService.ɵfac = function MessagesService_Factory(t) {\n  return new (t || MessagesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TrendingMovieService));\n};\nMessagesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessagesService,\n  factory: MessagesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,OAAO,QAAQ,MAAM;;;;AAK9B,OAAM,MAAOC,eAAe;EAO1BC,YAAoBC,IAAgB,EAAUC,oBAA0C;IAApE,SAAI,GAAJD,IAAI;IAAsB,yBAAoB,GAApBC,oBAAoB;IALlE,4BAAuB,GAAG,IAAIJ,OAAO,EAAa;IAClD,aAAQ,GAAc,EAAE;IAKtB,IAAI,CAACI,oBAAoB,CAACC,iBAAiB,EAAE;IAG7C,IAAI,CAACC,WAAW,EAAE;EAEpB;EAEAA,WAAW;IACT;IACA;IAEA,IAAI,CAACH,IAAI,CAACI,GAAG,CAA2C,gCAAgC,CAAC,CACtFC,SAAS,CACPC,YAAY,IAAI;MACf,IAAI,CAACC,QAAQ,GAAGD,YAAY,CAACC,QAAQ;MACrC,IAAI,CAACC,YAAY,GAAG,IAAI,CAACC,QAAQ,EAAE;MACnCC,OAAO,CAACC,GAAG,CAACL,YAAY,CAACC,QAAQ,CAAC;MAElC;MACA,IAAI,CAACK,uBAAuB,CAACC,IAAI,CAAC,IAAI,CAACN,QAAQ,CAACO,KAAK,EAAE,CAAC;MAEvDC,KAAU,IAAI;QACbL,OAAO,CAACC,GAAG,CAACI,KAAK,CAAC;MACpB,CAAC;IACH,CAAC,CAAC;EACR;EAEAC,UAAU,CAACC,EAAU;IACnB,KAAK,MAAMC,OAAO,IAAI,IAAI,CAACX,QAAQ,EAAE;MACnC,IAAIW,OAAO,CAACD,EAAE,KAAKA,EAAE,EAAE;QACrB,OAAOC,OAAO;;;IAGlB,OAAO,IAAK;EACd;EAEAT,QAAQ;IACN,IAAIU,KAAK,GAAG,CAAC;IACb,KAAK,MAAMD,OAAO,IAAI,IAAI,CAACX,QAAQ,EAAE;MACnC,MAAMa,SAAS,GAAG,CAACF,OAAO,CAACD,EAAE;MAC7B,IAAIG,SAAS,GAAGD,KAAK,EAAE;QACrBA,KAAK,GAAGC,SAAS;;;IAGrB,OAAOD,KAAK;EACd;EAEAE,UAAU,CAACC,UAAmB;IAC5B;IACA;IACA,IAAI,CAACA,UAAU,EAAE;MACf;MACA;;IAGF;IACA,MAAMC,OAAO,GAAG,IAAI3B,WAAW,CAAC;MAC9B,cAAc,EAAE;KACjB,CAAC;IAEF;IACA0B,UAAU,CAACL,EAAE,GAAG,EAAE;IAClB,MAAMO,UAAU,GAAGC,IAAI,CAACC,SAAS,CAACJ,UAAU,CAAC;IAE7C;IACA,IAAI,CAACtB,IAAI,CAAC2B,IAAI,CAAC,iCAAiC,EAAEH,UAAU,EAAE;MAAED,OAAO,EAAEA;IAAO,CAAE;IAChF;IAAA,CACClB,SAAS,CACR,MAAK;MAEH;MACA,IAAI,CAACO,uBAAuB,CAACC,IAAI,CAAC,IAAI,CAACN,QAAQ,CAACO,KAAK,EAAE,CAAC;IAC1D,CAAC,CAAC;EACR;EAEAc,aAAa;IACX,IAAIrB,QAAQ,GAAGkB,IAAI,CAACC,SAAS,CAAC,IAAI,CAACnB,QAAQ,CAAC;IAE5C,MAAMgB,OAAO,GAAG,IAAI3B,WAAW,CAAC;MAC9B,cAAc,EAAE;KACjB,CAAC;IAEF,IAAI,CAACI,IAAI,CAAC6B,GAAG,CAAC,iCAAiC,EAAEtB,QAAQ,EAAE;MAAEgB,OAAO,EAAEA;IAAO,CAAE,CAAC,CAC7ElB,SAAS,CACR,MAAK;MAEH,IAAI,CAACO,uBAAuB,CAACC,IAAI,CAAC,IAAI,CAACN,QAAQ,CAACO,KAAK,EAAE,CAAC;IAC1D,CAAC,CACF;EACL;;AAjGWhB,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAgC,SAAfhC,eAAe;EAAAiC,YAFd;AAAM","names":["HttpHeaders","Subject","MessagesService","constructor","http","trendingMovieService","getTrendingMovies","getMessages","get","subscribe","messagesData","messages","maxMessageId","getMaxId","console","log","messageListChangedEvent","next","slice","error","getMessage","id","message","maxId","currentId","addMessage","newMessage","headers","strMessage","JSON","stringify","post","storeMessages","put","factory","providedIn"],"sourceRoot":"","sources":["/Users/emilianomassai/Documents/GitHub/WDD_430_Final_Project/cms/src/app/messages/messages.service.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { Message } from './message.model';\nimport { TrendingMovieService } from 'src/app/trendingMovies/trendingMovie.service';\nimport { MOCKMESSAGES } from './MOCKMESSAGES';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessagesService {\n\n  messageListChangedEvent = new Subject<Message[]>();\n  messages: Message[] = [];\n\n  maxMessageId!: number;\n\n  constructor(private http: HttpClient, private trendingMovieService: TrendingMovieService) {\n    this.trendingMovieService.getTrendingMovies();\n\n\n    this.getMessages();\n\n  }\n\n  getMessages() {\n    // this.http.get<Message[]>('https://cms-wdd430-58d60-default-rtdb.firebaseio.com/messages.json')\n    // this.http.get<Message[]>('http://localhost:3000/messages')\n\n    this.http.get<{ message: string; messages: Message[] }>('http://127.0.0.1:4200/messages')\n      .subscribe(\n        (messagesData) => {\n          this.messages = messagesData.messages;\n          this.maxMessageId = this.getMaxId();\n          console.log(messagesData.messages)\n\n          // this.messages.sort((a, b) => (a.id < b.id) ? 1 : (a.id > b.id) ? -1 : 0)\n          this.messageListChangedEvent.next(this.messages.slice());\n\n          (error: any) => {\n            console.log(error);\n          }\n        })\n  }\n\n  getMessage(id: string): Message {\n    for (const message of this.messages) {\n      if (message.id === id) {\n        return message;\n      }\n    }\n    return null!;\n  }\n\n  getMaxId(): number {\n    let maxId = 0;\n    for (const message of this.messages) {\n      const currentId = +message.id;\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n\n  addMessage(newMessage: Message) {\n    // this.messages.push(message);\n    // this.storeMessages();\n    if (!newMessage) {\n      //exit\n      return;\n    }\n\n    //set headers\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    //convert object to string to send on request\n    newMessage.id = '';\n    const strMessage = JSON.stringify(newMessage);\n\n    //send request with object and headers\n    this.http.post('http://127.0.0.1:4200/messages/', strMessage, { headers: headers })\n      //subscribe to response\n      .subscribe(\n        () => {\n\n          //emit change\n          this.messageListChangedEvent.next(this.messages.slice());\n        });\n  }\n\n  storeMessages() {\n    let messages = JSON.stringify(this.messages);\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    this.http.put('http://127.0.0.1:4200/messages/', messages, { headers: headers })\n      .subscribe(\n        () => {\n\n          this.messageListChangedEvent.next(this.messages.slice());\n        }\n      )\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}