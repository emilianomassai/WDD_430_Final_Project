{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MovieService {\n  constructor(http) {\n    this.http = http;\n    this.startedEditing = new Subject();\n    this.movieListChangedEvent = new Subject();\n    this.movieSelectedEvent = new EventEmitter();\n    this.movies = [];\n    this.maxMovieId = this.getMaxId();\n  }\n  getMovies() {\n    this.http.get('http://127.0.0.1:4200/movies').subscribe(moviesData => {\n      this.movies = moviesData.movies;\n      this.maxMovieId = this.getMaxId();\n      this.movies.sort((a, b) => a.name > b.name ? 1 : a.name < b.name ? -1 : 0);\n      console.log(moviesData);\n      this.movieListChangedEvent.next(this.movies.slice());\n      error => {\n        console.log(error);\n      };\n    });\n  }\n  getMovie(id) {\n    for (const movie of this.movies) {\n      if (movie.id == id) {\n        return movie;\n      }\n    }\n    return null;\n  }\n  getMaxId() {\n    let maxId = 1;\n    let currentId = 0;\n    for (const movie of this.movies) {\n      currentId == parseInt(movie.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n      console.log('getMaxId is working on Movies');\n    }\n    return maxId;\n  }\n  sortAndSend() {\n    this.movies.sort((a, b) => a.name < b.name ? -1 : 0);\n    this.movieListChangedEvent.next(this.movies.slice());\n  }\n  deleteMovie(movie) {\n    if (!movie) {\n      return;\n    }\n    const pos = this.movies.findIndex(d => d.id === movie.id);\n    if (pos < 0) {\n      return;\n    }\n    // delete from database\n    this.http.delete('http://127.0.0.1:4200/movies/' + movie.id).subscribe(() => {\n      this.movies.splice(pos, 1);\n      this.sortAndSend();\n    });\n  }\n  addMovie(movie) {\n    if (!movie) {\n      return;\n    }\n    movie.id = '';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // add to database\n    this.http.post('http://127.0.0.1:4200/movies/', movie, {\n      headers: headers\n    }).subscribe(responseData => {\n      this.movies.push(responseData.movie);\n      this.sortAndSend();\n    });\n  }\n  updateMovie(originalMovie, newMovie) {\n    if (!originalMovie || !newMovie) {\n      return;\n    }\n    const pos = this.movies.findIndex(d => d.id === originalMovie.id);\n    if (pos < 0) {\n      return;\n    }\n    newMovie.id = originalMovie.id;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // update database\n    this.http.put('http://127.0.0.1:4200/movies/' + originalMovie.id, newMovie, {\n      headers: headers\n    }).subscribe(() => {\n      this.movies[pos] = newMovie;\n      this.movies.sort((a, b) => a.name < b.name ? -1 : 0);\n      this.movieListChangedEvent.next(this.movies.slice());\n    });\n  }\n  storeMovies() {\n    let movies = JSON.stringify(this.movies);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.http.put('http://127.0.0.1:4200/movies/', movies, {\n      headers: headers\n    }).subscribe(() => {\n      this.movieListChangedEvent.next(this.movies.slice());\n    });\n  }\n}\nMovieService.ɵfac = function MovieService_Factory(t) {\n  return new (t || MovieService)(i0.ɵɵinject(i1.HttpClient));\n};\nMovieService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MovieService,\n  factory: MovieService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","Subject","HttpHeaders","MovieService","constructor","http","maxMovieId","getMaxId","getMovies","get","subscribe","moviesData","movies","sort","a","b","name","console","log","movieListChangedEvent","next","slice","error","getMovie","id","movie","maxId","currentId","parseInt","sortAndSend","deleteMovie","pos","findIndex","d","delete","splice","addMovie","headers","post","responseData","push","updateMovie","originalMovie","newMovie","put","storeMovies","JSON","stringify","factory","providedIn"],"sourceRoot":"","sources":["/Users/emilianomassai/Documents/GitHub/WDD_430_Final_Project/cms/src/app/movies/movie.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\nimport { Movie } from './movies.model';\nimport { Subject } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MovieService {\n  private maxMovieId!: number;\n  startedEditing = new Subject<number>();\n\n\n  movieListChangedEvent = new Subject<Movie[]>();\n  movieSelectedEvent = new EventEmitter<Movie>();\n\n  private movies: Movie[] = [];\n\n  constructor(private http: HttpClient) {\n\n    this.maxMovieId = this.getMaxId();\n\n  }\n\n\n\n  getMovies() {\n\n\n\n    this.http.get<{ message: string; movies: Movie[] }>('http://127.0.0.1:4200/movies')\n      .subscribe(\n        (moviesData) => {\n          this.movies = moviesData.movies;\n          this.maxMovieId = this.getMaxId();\n          this.movies.sort((a, b) => (a.name > b.name) ? 1 : (a.name < b.name) ? -1 : 0);\n\n          console.log(moviesData)\n\n          this.movieListChangedEvent.next(this.movies.slice());\n          (error: any) => {\n            console.log(error);\n          }\n        })\n  }\n\n\n\n  getMovie(id: string): Movie {\n    for (const movie of this.movies) {\n      if (movie.id == id) {\n        return movie;\n      }\n    }\n    return null!;\n  }\n\n\n  getMaxId(): number {\n\n    let maxId = 1\n    let currentId = 0;\n    for (const movie of this.movies) {\n      currentId == parseInt(movie.id);\n      if (currentId > maxId) {\n        maxId = currentId\n      }\n      console.log('getMaxId is working on Movies')\n    }\n    return maxId\n  }\n\n  sortAndSend() {\n    this.movies.sort((a, b) => a.name < b.name ? -1 : 0);\n    this.movieListChangedEvent.next(this.movies.slice());\n  }\n\n  deleteMovie(movie: Movie) {\n\n    if (!movie) {\n      return;\n    }\n\n    const pos = this.movies.findIndex(d => d.id === movie.id);\n\n    if (pos < 0) {\n      return;\n    }\n\n    // delete from database\n    this.http.delete('http://127.0.0.1:4200/movies/' + movie.id)\n      .subscribe(\n        () => {\n          this.movies.splice(pos, 1);\n          this.sortAndSend();\n        }\n      );\n  }\n\n\n  addMovie(movie: Movie) {\n    if (!movie) {\n      return;\n    }\n\n    movie.id = '';\n\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    // add to database\n    this.http.post<{ message: string, movie: Movie }>('http://127.0.0.1:4200/movies/',\n      movie,\n      { headers: headers })\n      .subscribe(\n        (responseData) => {\n          this.movies.push(responseData.movie);\n          this.sortAndSend();\n        }\n      );\n  }\n\n\n  updateMovie(originalMovie: Movie, newMovie: Movie) {\n    if (!originalMovie || !newMovie) {\n      return;\n    }\n\n    const pos = this.movies.findIndex(d => d.id === originalMovie.id);\n\n    if (pos < 0) {\n      return;\n    }\n\n    newMovie.id = originalMovie.id;\n\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    // update database\n    this.http.put('http://127.0.0.1:4200/movies/' + originalMovie.id,\n      newMovie, { headers: headers })\n      .subscribe(\n        () => {\n          this.movies[pos] = newMovie;\n          this.movies.sort((a, b) => a.name < b.name ? -1 : 0);\n          this.movieListChangedEvent.next(this.movies.slice());\n        }\n      );\n  }\n\n\n  storeMovies() {\n    let movies = JSON.stringify(this.movies);\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n\n    this.http.put('http://127.0.0.1:4200/movies/', movies, { headers: headers })\n      .subscribe(\n        () => {\n\n          this.movieListChangedEvent.next(this.movies.slice());\n        }\n      )\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}