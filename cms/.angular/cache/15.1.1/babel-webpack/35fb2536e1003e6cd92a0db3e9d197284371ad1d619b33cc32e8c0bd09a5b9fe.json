{"ast":null,"code":"import { EventEmitter } from '@angular/core';\n// import { MOCKCONTACTS } from './MOCKCONTACTS';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Contact } from './contacts.model';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContactService {\n  constructor(http) {\n    this.http = http;\n    this.contactChangedEvent = new EventEmitter();\n    this.contactListChangedEvent = new Subject();\n    this.contacts = [];\n    // this.contacts = MOCKCONTACTS;\n    // this.getContacts();\n    this.maxContactId = this.getMaxId();\n  }\n  findTrending() {\n    return this.http.get('https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd');\n  }\n  getContacts() {\n    // this.http.get<Contact[]>('https://cms-wdd430-58d60-default-rtdb.firebaseio.com/contacts.json')\n    //   this.http.get<{ message: string; contacts: Contact[] }>('http://127.0.0.1:4200/contacts')\n    //     .subscribe(\n    //       (contactsData) => {\n    //         this.contacts = contactsData.contacts;\n    //         this.maxContactId = this.getMaxId();\n    //         console.log(contactsData.contacts)\n    //         // this.contacts.sort((a, b) => (a.name < b.name) ? 1 : (a.name > b.name) ? -1 : 0);\n    //         this.contactListChangedEvent.next(this.contacts.slice());\n    //         (error: any) => {\n    //           console.log(error);\n    //         }\n    //       })\n    // }\n    // getContacts(): Contact[] { return this.contacts.slice(); }\n    getContact(id, string);\n    Contact;\n    {\n      for (const contact of this.contacts) {\n        if (contact.id === id) {\n          return contact;\n        }\n      }\n      return null;\n    }\n    getMaxId();\n    number;\n    {\n      let maxId = 0;\n      for (const contact of this.contacts) {\n        const currentId = +contact.id;\n        if (currentId > maxId) {\n          maxId = currentId;\n        }\n      }\n      return maxId;\n    }\n    addContact(newContact, Contact);\n    {\n      if (newContact === null || newContact === undefined) {\n        return;\n      }\n      // this.maxContactId++;\n      // newContact.id = this.maxContactId.toString();\n      // this.contacts.push(newContact);\n      // this.storeContacts();\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      newContact.id = '';\n      const strContact = JSON.stringify(newContact);\n      this.http.post('http://127.0.0.1:4200/contacts/', strContact, {\n        headers: headers\n      }).subscribe(() => {\n        this.contactChangedEvent.next(this.contacts.slice());\n      });\n    }\n    updateContact(originalContact, Contact, newContact, Contact);\n    {\n      if (!originalContact || !newContact) {\n        return;\n      }\n      const pos = this.contacts.findIndex(c => c.id === originalContact.id);\n      // const pos = this.contacts.indexOf(originalContact);\n      if (pos < 0) {\n        return;\n      }\n      newContact.id = originalContact.id;\n      // newContact.id = originalContact.id;\n      // this.contacts[pos] = newContact;\n      // this.storeContacts();\n      //set headers\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      // const strContact = JSON.stringify(newContact);\n      this.http.patch('http://127.0.0.1:4200/contacts/' + originalContact.id, newContact, {\n        headers: headers\n      }).subscribe(() => {\n        this.contacts[pos] = newContact;\n        this.contactListChangedEvent.next(this.contacts.slice());\n      });\n    }\n    deleteContact(contact, Contact);\n    {\n      if (contact === null || contact === undefined) {\n        return;\n      }\n      const pos = this.contacts.indexOf(contact);\n      if (pos < 0) {\n        return;\n      }\n      // this.contacts.splice(pos, 1);\n      // this.storeContacts();\n      this.http.delete('http://127.0.0.1:4200/contacts/' + contact.id).subscribe(() => {\n        this.contactListChangedEvent.next(this.contacts.slice());\n      });\n    }\n    storeContacts();\n    {\n      let contacts = JSON.stringify(this.contacts);\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      this.http.put('https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd', contacts, {\n        headers: headers\n      }).subscribe(() => {\n        this.contactListChangedEvent.next(this.contacts.slice());\n      });\n    }\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient));\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","HttpHeaders","Contact","Subject","ContactService","constructor","http","maxContactId","getMaxId","findTrending","get","getContacts","getContact","id","string","contact","contacts","number","maxId","currentId","addContact","newContact","undefined","headers","strContact","JSON","stringify","post","subscribe","contactChangedEvent","next","slice","updateContact","originalContact","pos","findIndex","c","patch","contactListChangedEvent","deleteContact","indexOf","delete","storeContacts","put","factory","providedIn"],"sourceRoot":"","sources":["/Users/emilianomassai/Documents/GitHub/WDD_430_Final_Project/cms/src/app/contacts/contact.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\n// import { MOCKCONTACTS } from './MOCKCONTACTS';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Contact } from './contacts.model';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactService {\n  contactChangedEvent = new EventEmitter<Contact[]>();\n\n  contactListChangedEvent = new Subject<Contact[]>();\n\n  maxContactId: number;\n\n  private contacts: Contact[] = [];\n\n  constructor(private http: HttpClient) {\n    // this.contacts = MOCKCONTACTS;\n    // this.getContacts();\n    this.maxContactId = this.getMaxId();\n  }\n\n\n  findTrending() {\n    return this.http.get('https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd');\n\n  }\n\n  getContacts() {\n\n    // this.http.get<Contact[]>('https://cms-wdd430-58d60-default-rtdb.firebaseio.com/contacts.json')\n    //   this.http.get<{ message: string; contacts: Contact[] }>('http://127.0.0.1:4200/contacts')\n    //     .subscribe(\n    //       (contactsData) => {\n    //         this.contacts = contactsData.contacts;\n    //         this.maxContactId = this.getMaxId();\n    //         console.log(contactsData.contacts)\n\n    //         // this.contacts.sort((a, b) => (a.name < b.name) ? 1 : (a.name > b.name) ? -1 : 0);\n    //         this.contactListChangedEvent.next(this.contacts.slice());\n\n    //         (error: any) => {\n    //           console.log(error);\n    //         }\n    //       })\n    // }\n\n    // getContacts(): Contact[] { return this.contacts.slice(); }\n\n\n    getContact(id: string): Contact {\n      for (const contact of this.contacts) {\n        if (contact.id === id) {\n          return contact;\n        }\n      }\n      return null!;\n\n    }\n\n    getMaxId(): number {\n      let maxId = 0;\n      for (const contact of this.contacts) {\n        const currentId = +contact.id;\n        if (currentId > maxId) {\n          maxId = currentId;\n        }\n      }\n      return maxId;\n    }\n\n    addContact(newContact: Contact) {\n      if (newContact === null || newContact === undefined) {\n        return;\n      }\n\n      // this.maxContactId++;\n      // newContact.id = this.maxContactId.toString();\n      // this.contacts.push(newContact);\n      // this.storeContacts();\n\n\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n\n      newContact.id = '';\n      const strContact = JSON.stringify(newContact);\n\n      this.http.post('http://127.0.0.1:4200/contacts/', strContact, { headers: headers })\n        .subscribe(\n          () => {\n            this.contactChangedEvent.next(this.contacts.slice());\n          });\n    }\n\n    updateContact(originalContact: Contact, newContact: Contact) {\n      if (!originalContact || !newContact) {\n        return;\n      }\n\n      const pos = this.contacts.findIndex(c => c.id === originalContact.id);\n\n      // const pos = this.contacts.indexOf(originalContact);\n      if (pos < 0) {\n        return;\n      }\n\n      newContact.id = originalContact.id;\n\n      // newContact.id = originalContact.id;\n      // this.contacts[pos] = newContact;\n      // this.storeContacts();\n      //set headers\n      const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n      // const strContact = JSON.stringify(newContact);\n\n      this.http.patch('http://127.0.0.1:4200/contacts/' + originalContact.id\n        , newContact, { headers: headers })\n        .subscribe(\n          () => {\n            this.contacts[pos] = newContact;\n            this.contactListChangedEvent.next(this.contacts.slice());\n          });\n    }\n\n    deleteContact(contact: Contact) {\n      if (contact === null || contact === undefined) {\n        return;\n      }\n      const pos = this.contacts.indexOf(contact);\n\n      if (pos < 0) {\n        return;\n      }\n      // this.contacts.splice(pos, 1);\n      // this.storeContacts();\n      this.http.delete('http://127.0.0.1:4200/contacts/' + contact.id)\n        .subscribe(\n          () => {\n            this.contactListChangedEvent.next(this.contacts.slice());\n          });\n\n    }\n\n    storeContacts() {\n      let contacts = JSON.stringify(this.contacts);\n\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n\n      this.http.put('https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd', contacts, { headers: headers })\n        .subscribe(\n          () => {\n            this.contactListChangedEvent.next(this.contacts.slice());\n          }\n        )\n    }\n\n  }"]},"metadata":{},"sourceType":"module","externalDependencies":[]}