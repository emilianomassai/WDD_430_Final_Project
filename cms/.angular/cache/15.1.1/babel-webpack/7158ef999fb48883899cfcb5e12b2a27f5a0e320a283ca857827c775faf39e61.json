{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../contact.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/platform-browser\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"./contact-item/contact-item.component\";\nfunction ContactListComponent_app_contact_item_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"app-contact-item\", 10)(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"img\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const contact_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(contact_r1.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"alt\", contact_r1.title);\n    i0.ɵɵproperty(\"src\", ctx_r0.sanitizer.bypassSecurityTrustResourceUrl(\"http://image.tmdb.org/t/p/w500\" + contact_r1.poster_path), i0.ɵɵsanitizeUrl);\n  }\n}\nexport class ContactListComponent {\n  constructor(contactService, http, sanitizer) {\n    this.contactService = contactService;\n    this.http = http;\n    this.sanitizer = sanitizer;\n    this.term = '';\n    this.data = [];\n    this.contacts = [];\n  }\n  ngOnInit() {\n    this.subscription = this.contactService.contactListChangedEvent.subscribe(contacts => {\n      this.contacts = contacts;\n    });\n    this.contactService.getContacts();\n    this.contactService.findTrending();\n  }\n  getData() {\n    const url = 'https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd';\n    this.http.get(url).subscribe(res => {\n      this.data = res;\n      this.topRated = this.data.results;\n      // TODO !!!\n      // here is the list of movies .. needs to use this to display the movies on the page\n      console.log(\"poster: \" + this.data.results[0].poster_path);\n      console.log(this.data.results[0].title);\n    });\n  }\n  search(value) {\n    this.term = value;\n  }\n  findTrending() {}\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\nContactListComponent.ɵfac = function ContactListComponent_Factory(t) {\n  return new (t || ContactListComponent)(i0.ɵɵdirectiveInject(i1.ContactService), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.DomSanitizer));\n};\nContactListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ContactListComponent,\n  selectors: [[\"cms-contact-list\"]],\n  decls: 14,\n  vars: 1,\n  consts: [[1, \"panel\", \"panel-default\"], [1, \"panel-heading\"], [1, \"row\", \"pad-left-right\"], [1, \"pull-left\", \"title\"], [1, \"btn\", \"btn-success\", \"pull-right\", 3, \"click\"], [1, \"panel-body\"], [1, \"row\"], [1, \"col-sm-4\"], [\"style\", \"text-align: center\", 4, \"ngFor\", \"ngForOf\"], [1, \"pull-right\"], [2, \"text-align\", \"center\"], [1, \"img-fluid\", \"d-block\", \"mx-auto\", 2, \"max-width\", \"100%\", 3, \"alt\", \"src\"]],\n  template: function ContactListComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"span\", 3);\n      i0.ɵɵtext(4, \"Trending now\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"a\", 4);\n      i0.ɵɵlistener(\"click\", function ContactListComponent_Template_a_click_5_listener() {\n        return ctx.getData();\n      });\n      i0.ɵɵtext(6, \"Fetch Data \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"br\")(8, \"hr\");\n      i0.ɵɵelementStart(9, \"div\", 5)(10, \"div\", 6)(11, \"div\", 7);\n      i0.ɵɵtemplate(12, ContactListComponent_app_contact_item_12_Template, 4, 3, \"app-contact-item\", 8);\n      i0.ɵɵelement(13, \"span\", 9);\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(12);\n      i0.ɵɵproperty(\"ngForOf\", ctx.topRated);\n    }\n  },\n  dependencies: [i4.NgForOf, i5.ContactItemComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;;;IAWYA,4CAGC;IACIA,YAAmB;IAAAA,iBAAI;IAC1BA,0BASE;IACJA,iBAAmB;;;;;IAXdA,eAAmB;IAAnBA,sCAAmB;IAEpBA,eAAyB;IAAzBA,iDAAyB;IACzBA,kJAIC;;;ACTjB,OAAM,MAAOC,oBAAoB;EAa/BC,YAAoBC,cAA8B,EAAUC,IAAgB,EAASC,SAAuB;IAAxF,mBAAc,GAAdF,cAAc;IAA0B,SAAI,GAAJC,IAAI;IAAqB,cAAS,GAATC,SAAS;IAX9F,SAAI,GAAW,EAAE;IACjB,SAAI,GAAQ,EAAE;IAId,aAAQ,GAAc,EAAE;EASxB;EAEAC,QAAQ;IAEN,IAAI,CAACC,YAAY,GAAG,IAAI,CAACJ,cAAc,CAACK,uBAAuB,CAC5DC,SAAS,CAAEC,QAAmB,IAAI;MACjC,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IAC1B,CAAC,CAAC;IAGJ,IAAI,CAACP,cAAc,CAACQ,WAAW,EAAE;IACjC,IAAI,CAACR,cAAc,CAACS,YAAY,EAAE;EAGpC;EACAC,OAAO;IACL,MAAMC,GAAG,GAAG,wFAAwF;IACpG,IAAI,CAACV,IAAI,CAACW,GAAG,CAACD,GAAG,CAAC,CAACL,SAAS,CAAEO,GAAG,IAAI;MACnC,IAAI,CAACC,IAAI,GAAGD,GAAG;MACf,IAAI,CAACE,QAAQ,GAAG,IAAI,CAACD,IAAI,CAACE,OAAO;MACjC;MACA;MACAC,OAAO,CAACC,GAAG,CAAC,UAAU,GAAG,IAAI,CAACJ,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACG,WAAW,CAAC;MAC1DF,OAAO,CAACC,GAAG,CAAC,IAAI,CAACJ,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACI,KAAK,CAAC;IACzC,CAAC,CAAC;EACJ;EAEAC,MAAM,CAACC,KAAa;IAElB,IAAI,CAACC,IAAI,GAAGD,KAAK;EACnB;EAEAb,YAAY,IAEZ;EAGAe,WAAW;IACT,IAAI,CAACpB,YAAY,CAACqB,WAAW,EAAE;EACjC;;AAvDW3B,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;QAApBA,oBAAoB;EAAA4B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDbjCjC,8BAAiC;MAGGA,4BAAY;MAAAA,iBAAO;MAEjDA,4BAA0D;MAApBA;QAAA,OAASkC,aAAS;MAAA,EAAC;MAAClC,2BAAW;MAAAA,iBAAI;MACzEA,qBAAM;MAENA,8BAAwB;MAGlBA,iGAemB;MACnBA,2BAAiC;MACnCA,iBAAM;;;MAhBkBA,gBAAW;MAAXA,sCAAW","names":["i0","ContactListComponent","constructor","contactService","http","sanitizer","ngOnInit","subscription","contactListChangedEvent","subscribe","contacts","getContacts","findTrending","getData","url","get","res","data","topRated","results","console","log","poster_path","title","search","value","term","ngOnDestroy","unsubscribe","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/emilianomassai/Documents/GitHub/WDD_430_Final_Project/cms/src/app/contacts/contact-list/contact-list.component.html","/Users/emilianomassai/Documents/GitHub/WDD_430_Final_Project/cms/src/app/contacts/contact-list/contact-list.component.ts"],"sourcesContent":["<div class=\"panel panel-default\">\n  <div class=\"panel-heading\">\n    <div class=\"row pad-left-right\">\n      <span class=\"pull-left title\">Trending now</span>\n\n      <a class=\"btn btn-success pull-right\" (click)=\"getData()\">Fetch Data </a>\n      <br />\n      <hr />\n      <div class=\"panel-body\">\n        <div class=\"row\">\n          <div class=\"col-sm-4\">\n            <app-contact-item\n              *ngFor=\"let contact of topRated\"\n              style=\"text-align: center\"\n            >\n              <p>{{ contact.title }}</p>\n              <img\n                alt=\"{{ contact.title }}\"\n                [src]=\"\n                  sanitizer.bypassSecurityTrustResourceUrl(\n                    'http://image.tmdb.org/t/p/w500' + contact.poster_path\n                  )\n                \"\n                class=\"img-fluid d-block mx-auto\"\n                style=\"max-width: 100%\"\n              />\n            </app-contact-item>\n            <span class=\"pull-right\"> </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Contact } from '../contacts.model';\nimport { ContactService } from '../contact.service';\nimport { Subscription } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n\n@Component({\n  selector: 'cms-contact-list',\n  templateUrl: './contact-list.component.html',\n  styleUrls: ['./contact-list.component.css']\n})\nexport class ContactListComponent implements OnInit, OnDestroy {\n\n  term: String = '';\n  data: any = []\n  topRated: any;\n\n\n  contacts: Contact[] = []\n\n\n  private subscription!: Subscription;\n\n\n  constructor(private contactService: ContactService, private http: HttpClient, public sanitizer: DomSanitizer\n  ) {\n\n  }\n\n  ngOnInit(): void {\n\n    this.subscription = this.contactService.contactListChangedEvent\n      .subscribe((contacts: Contact[]) => {\n        this.contacts = contacts;\n      });\n\n\n    this.contactService.getContacts();\n    this.contactService.findTrending();\n\n\n  }\n  getData() {\n    const url = 'https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd'\n    this.http.get(url).subscribe((res) => {\n      this.data = res\n      this.topRated = this.data.results\n      // TODO !!!\n      // here is the list of movies .. needs to use this to display the movies on the page\n      console.log(\"poster: \" + this.data.results[0].poster_path)\n      console.log(this.data.results[0].title)\n    })\n  }\n\n  search(value: String) {\n\n    this.term = value;\n  }\n\n  findTrending() {\n\n  }\n\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n\n\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}