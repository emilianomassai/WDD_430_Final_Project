{"ast":null,"code":"import { EventEmitter } from '@angular/core';\n// import { MOCKCONTACTS } from './MOCKCONTACTS';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContactService {\n  constructor(http) {\n    this.http = http;\n    this.contactChangedEvent = new EventEmitter();\n    this.contactListChangedEvent = new Subject();\n    this.contacts = [];\n    // this.contacts = MOCKCONTACTS;\n    // this.getContacts();\n    this.maxContactId = this.getMaxId();\n    this.storeContacts();\n  }\n  findTrending() {\n    return this.http.get('https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd');\n  }\n  getContacts() {\n    // this.http.get<Contact[]>('https://cms-wdd430-58d60-default-rtdb.firebaseio.com/contacts.json')\n    this.http.get('http://127.0.0.1:4200/contacts').subscribe(contactsData => {\n      this.contacts = contactsData.contacts;\n      this.maxContactId = this.getMaxId();\n      console.log(contactsData.contacts);\n      // this.contacts.sort((a, b) => (a.name < b.name) ? 1 : (a.name > b.name) ? -1 : 0);\n      this.contactListChangedEvent.next(this.contacts.slice());\n      error => {\n        console.log(error);\n      };\n    });\n  }\n  // getContacts(): Contact[] { return this.contacts.slice(); }\n  getContact(id) {\n    for (const contact of this.contacts) {\n      if (contact.id === id) {\n        return contact;\n      }\n    }\n    return null;\n  }\n  getMaxId() {\n    let maxId = 0;\n    for (const contact of this.contacts) {\n      const currentId = +contact.id;\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n  addContact(newContact) {\n    if (newContact === null || newContact === undefined) {\n      return;\n    }\n    // this.maxContactId++;\n    // newContact.id = this.maxContactId.toString();\n    // this.contacts.push(newContact);\n    // this.storeContacts();\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    newContact.id = '';\n    const strContact = JSON.stringify(newContact);\n    this.http.post('http://127.0.0.1:4200/contacts/', strContact, {\n      headers: headers\n    }).subscribe(() => {\n      this.contactChangedEvent.next(this.contacts.slice());\n    });\n  }\n  updateContact(originalContact, newContact) {\n    if (!originalContact || !newContact) {\n      return;\n    }\n    const pos = this.contacts.findIndex(c => c.id === originalContact.id);\n    // const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n    newContact.id = originalContact.id;\n    // newContact.id = originalContact.id;\n    // this.contacts[pos] = newContact;\n    // this.storeContacts();\n    //set headers\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // const strContact = JSON.stringify(newContact);\n    this.http.patch('http://127.0.0.1:4200/contacts/' + originalContact.id, newContact, {\n      headers: headers\n    }).subscribe(() => {\n      this.contacts[pos] = newContact;\n      this.contactListChangedEvent.next(this.contacts.slice());\n    });\n  }\n  deleteContact(contact) {\n    if (contact === null || contact === undefined) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    // this.contacts.splice(pos, 1);\n    // this.storeContacts();\n    this.http.delete('http://127.0.0.1:4200/contacts/' + contact.id).subscribe(() => {\n      this.contactListChangedEvent.next(this.contacts.slice());\n    });\n  }\n  storeContacts() {\n    let contactsArray = [];\n    // const headers = new HttpHeaders({\n    //   'Content-Type': 'application/json'\n    // });\n    // this.http.put('https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd', contacts, { headers: headers })\n    //   .subscribe(\n    const url = 'https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd';\n    this.http.get(url).subscribe(res => {\n      () => {\n        this.contactListChangedEvent.next(this.contacts.slice());\n      };\n    });\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient));\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","HttpHeaders","Subject","ContactService","constructor","http","maxContactId","getMaxId","storeContacts","findTrending","get","getContacts","subscribe","contactsData","contacts","console","log","contactListChangedEvent","next","slice","error","getContact","id","contact","maxId","currentId","addContact","newContact","undefined","headers","strContact","JSON","stringify","post","contactChangedEvent","updateContact","originalContact","pos","findIndex","c","patch","deleteContact","indexOf","delete","contactsArray","url","res","factory","providedIn"],"sourceRoot":"","sources":["/Users/emilianomassai/Documents/GitHub/WDD_430_Final_Project/cms/src/app/contacts/contact.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\n// import { MOCKCONTACTS } from './MOCKCONTACTS';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Contact } from './contacts.model';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactService {\n  contactChangedEvent = new EventEmitter<Contact[]>();\n\n  contactListChangedEvent = new Subject<Contact[]>();\n\n  maxContactId: number;\n\n  private contacts: Contact[] = [];\n\n  constructor(private http: HttpClient) {\n    // this.contacts = MOCKCONTACTS;\n    // this.getContacts();\n    this.maxContactId = this.getMaxId();\n    this.storeContacts();\n  }\n\n\n  findTrending() {\n    return this.http.get('https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd');\n\n  }\n\n  getContacts() {\n\n    // this.http.get<Contact[]>('https://cms-wdd430-58d60-default-rtdb.firebaseio.com/contacts.json')\n    this.http.get<{ message: string; contacts: Contact[] }>('http://127.0.0.1:4200/contacts')\n      .subscribe(\n        (contactsData) => {\n          this.contacts = contactsData.contacts;\n          this.maxContactId = this.getMaxId();\n          console.log(contactsData.contacts)\n\n          // this.contacts.sort((a, b) => (a.name < b.name) ? 1 : (a.name > b.name) ? -1 : 0);\n          this.contactListChangedEvent.next(this.contacts.slice());\n\n          (error: any) => {\n            console.log(error);\n          }\n        })\n  }\n\n  // getContacts(): Contact[] { return this.contacts.slice(); }\n\n\n  getContact(id: string): Contact {\n    for (const contact of this.contacts) {\n      if (contact.id === id) {\n        return contact;\n      }\n    }\n    return null!;\n\n  }\n\n  getMaxId(): number {\n    let maxId = 0;\n    for (const contact of this.contacts) {\n      const currentId = +contact.id;\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n\n  addContact(newContact: Contact) {\n    if (newContact === null || newContact === undefined) {\n      return;\n    }\n\n    // this.maxContactId++;\n    // newContact.id = this.maxContactId.toString();\n    // this.contacts.push(newContact);\n    // this.storeContacts();\n\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    newContact.id = '';\n    const strContact = JSON.stringify(newContact);\n\n    this.http.post('http://127.0.0.1:4200/contacts/', strContact, { headers: headers })\n      .subscribe(\n        () => {\n          this.contactChangedEvent.next(this.contacts.slice());\n        });\n  }\n\n  updateContact(originalContact: Contact, newContact: Contact) {\n    if (!originalContact || !newContact) {\n      return;\n    }\n\n    const pos = this.contacts.findIndex(c => c.id === originalContact.id);\n\n    // const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n\n    newContact.id = originalContact.id;\n\n    // newContact.id = originalContact.id;\n    // this.contacts[pos] = newContact;\n    // this.storeContacts();\n    //set headers\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    // const strContact = JSON.stringify(newContact);\n\n    this.http.patch('http://127.0.0.1:4200/contacts/' + originalContact.id\n      , newContact, { headers: headers })\n      .subscribe(\n        () => {\n          this.contacts[pos] = newContact;\n          this.contactListChangedEvent.next(this.contacts.slice());\n        });\n  }\n\n  deleteContact(contact: Contact) {\n    if (contact === null || contact === undefined) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n\n    if (pos < 0) {\n      return;\n    }\n    // this.contacts.splice(pos, 1);\n    // this.storeContacts();\n    this.http.delete('http://127.0.0.1:4200/contacts/' + contact.id)\n      .subscribe(\n        () => {\n          this.contactListChangedEvent.next(this.contacts.slice());\n        });\n\n  }\n\n  storeContacts() {\n    let contactsArray = [];\n\n    // const headers = new HttpHeaders({\n    //   'Content-Type': 'application/json'\n    // });\n\n    // this.http.put('https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd', contacts, { headers: headers })\n    //   .subscribe(\n    const url = 'https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd'\n    this.http.get(url).subscribe((res) => {\n      () => {\n        this.contactListChangedEvent.next(this.contacts.slice());\n      }\n      )\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}