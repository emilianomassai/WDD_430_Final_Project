{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DocumentService {\n  constructor(http) {\n    this.http = http;\n    this.startedEditing = new Subject();\n    this.documentListChangedEvent = new Subject();\n    this.documentSelectedEvent = new EventEmitter();\n    // documentChangedEvent = new EventEmitter<Document[]>();\n    this.documents = [];\n    // this.documents = MOCKDOCUMENTS\n    this.router.navigate(['/documents'], {\n      relativeTo: this.route\n    });\n    this.maxDocumentId = this.getMaxId();\n  }\n  getDocuments() {\n    // I need to use this without the error check to avoid my subscription to get deprecated.\n    // this.http.get<Document[]>('https://cms-wdd430-58d60-default-rtdb.firebaseio.com/documents.json')\n    this.http.get('http://127.0.0.1:4200/documents').subscribe(documentsData => {\n      this.documents = documentsData.documents;\n      this.maxDocumentId = this.getMaxId();\n      this.documents.sort((a, b) => a.name < b.name ? 1 : a.name > b.name ? -1 : 0);\n      console.log(documentsData);\n      this.documentListChangedEvent.next(this.documents.slice());\n      error => {\n        console.log(error);\n      };\n    });\n  }\n  // getDocuments(): Document[] { return this.documents.slice(); }\n  getDocument(id) {\n    for (const document of this.documents) {\n      if (document.id == id) {\n        return document;\n      }\n    }\n    return null;\n  }\n  getMaxId() {\n    let maxId = 1;\n    let currentId = 0;\n    for (const document of this.documents) {\n      currentId == parseInt(document.id);\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n      console.log('getMaxId is working on Documents');\n    }\n    return maxId;\n  }\n  // deleteDocument(document: Document) {\n  //   if (document === null || document === undefined) {\n  //     return;\n  //   }\n  //   const pos = this.documents.indexOf(document);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   this.documents.splice(pos, 1);\n  //   this.storeDocuments();\n  // }\n  sortAndSend() {\n    this.documents.sort((a, b) => a.name < b.name ? -1 : 0);\n    this.documentListChangedEvent.next(this.documents.slice());\n  }\n  deleteDocument(document) {\n    if (!document) {\n      return;\n    }\n    const pos = this.documents.findIndex(d => d.id === document.id);\n    if (pos < 0) {\n      return;\n    }\n    // delete from database\n    this.http.delete('http://127.0.0.1:4200/documents/' + document.id).subscribe(() => {\n      this.documents.splice(pos, 1);\n      this.sortAndSend();\n    });\n  }\n  // addDocument(newDocument: Document) {\n  //   if (newDocument === null || newDocument === undefined) {\n  //     return;\n  //   }\n  //   this.maxDocumentId++;\n  //   newDocument.id = this.maxDocumentId.toString();\n  //   this.documents.push(newDocument);\n  //   this.storeDocuments();\n  // }\n  addDocument(document) {\n    if (!document) {\n      return;\n    }\n    // make sure id of the new Document is empty\n    document.id = '';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // add to database\n    this.http.post('http://127.0.0.1:4200/documents/', document, {\n      headers: headers\n    }).subscribe(responseData => {\n      // add new document to documents\n      this.documents.push(responseData.document);\n      this.sortAndSend();\n    });\n  }\n  // updateDocument(originalDocument: Document, newDocument: Document) {\n  //   if (originalDocument === null || originalDocument === undefined || newDocument === null || newDocument === undefined) {\n  //     return;\n  //   }\n  //   const pos = this.documents.indexOf(originalDocument)\n  //   if (pos < 0) {\n  //     return\n  //   }\n  //   newDocument.id = originalDocument.id\n  //   this.documents[pos] = newDocument\n  //   this.storeDocuments();\n  // }\n  updateDocument(originalDocument, newDocument) {\n    if (!originalDocument || !newDocument) {\n      return;\n    }\n    const pos = this.documents.findIndex(d => d.id === originalDocument.id);\n    if (pos < 0) {\n      return;\n    }\n    // set the id of the new Document to the id of the old Document\n    newDocument.id = originalDocument.id;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // update database\n    this.http.put('http://127.0.0.1:4200/documents/' + originalDocument.id, newDocument, {\n      headers: headers\n    }).subscribe(() => {\n      this.documents[pos] = newDocument;\n      this.documents.sort((a, b) => a.name < b.name ? -1 : 0);\n      this.documentListChangedEvent.next(this.documents.slice());\n    });\n  }\n  storeDocuments() {\n    let documents = JSON.stringify(this.documents);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // this.http.put('https://cms-wdd430-58d60-default-rtdb.firebaseio.com/documents.json', documents, { headers: headers })\n    this.http.put('http://127.0.0.1:4200/documents/', documents, {\n      headers: headers\n    }).subscribe(() => {\n      this.documentListChangedEvent.next(this.documents.slice());\n    });\n  }\n}\nDocumentService.ɵfac = function DocumentService_Factory(t) {\n  return new (t || DocumentService)(i0.ɵɵinject(i1.HttpClient));\n};\nDocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DocumentService,\n  factory: DocumentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","Subject","HttpHeaders","DocumentService","constructor","http","router","navigate","relativeTo","route","maxDocumentId","getMaxId","getDocuments","get","subscribe","documentsData","documents","sort","a","b","name","console","log","documentListChangedEvent","next","slice","error","getDocument","id","document","maxId","currentId","parseInt","sortAndSend","deleteDocument","pos","findIndex","d","delete","splice","addDocument","headers","post","responseData","push","updateDocument","originalDocument","newDocument","put","storeDocuments","JSON","stringify","factory","providedIn"],"sourceRoot":"","sources":["/Users/emilianomassai/Documents/GitHub/WDD_430_Final_Project/cms/src/app/documents/document.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\nimport { Document } from './documents.model';\nimport { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\nimport { Subject } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DocumentService {\n  private maxDocumentId!: number;\n  startedEditing = new Subject<number>();\n\n\n  documentListChangedEvent = new Subject<Document[]>();\n  documentSelectedEvent = new EventEmitter<Document>();\n  // documentChangedEvent = new EventEmitter<Document[]>();\n\n  private documents: Document[] = [];\n\n  constructor(private http: HttpClient) {\n\n    // this.documents = MOCKDOCUMENTS\n    this.router.navigate(['/documents'], { relativeTo: this.route });\n\n    this.maxDocumentId = this.getMaxId();\n\n  }\n\n\n\n  getDocuments() {\n\n    // I need to use this without the error check to avoid my subscription to get deprecated.\n    // this.http.get<Document[]>('https://cms-wdd430-58d60-default-rtdb.firebaseio.com/documents.json')\n\n\n    this.http.get<{ message: string; documents: Document[] }>('http://127.0.0.1:4200/documents')\n      .subscribe(\n        (documentsData) => {\n          this.documents = documentsData.documents;\n          this.maxDocumentId = this.getMaxId();\n          this.documents.sort((a, b) => (a.name < b.name) ? 1 : (a.name > b.name) ? -1 : 0);\n\n          console.log(documentsData)\n\n          this.documentListChangedEvent.next(this.documents.slice());\n          (error: any) => {\n            console.log(error);\n          }\n        })\n  }\n\n  // getDocuments(): Document[] { return this.documents.slice(); }\n\n\n  getDocument(id: string): Document {\n    for (const document of this.documents) {\n      if (document.id == id) {\n        return document;\n      }\n    }\n    return null!;\n  }\n\n\n  getMaxId(): number {\n\n    let maxId = 1\n    let currentId = 0;\n    for (const document of this.documents) {\n      currentId == parseInt(document.id);\n      if (currentId > maxId) {\n        maxId = currentId\n      }\n      console.log('getMaxId is working on Documents')\n    }\n    return maxId\n  }\n\n  // deleteDocument(document: Document) {\n  //   if (document === null || document === undefined) {\n  //     return;\n  //   }\n  //   const pos = this.documents.indexOf(document);\n  //   if (pos < 0) {\n  //     return;\n  //   }\n  //   this.documents.splice(pos, 1);\n  //   this.storeDocuments();\n  // }\n\n  sortAndSend() {\n    this.documents.sort((a, b) => a.name < b.name ? -1 : 0);\n    this.documentListChangedEvent.next(this.documents.slice());\n  }\n\n  deleteDocument(document: Document) {\n\n    if (!document) {\n      return;\n    }\n\n    const pos = this.documents.findIndex(d => d.id === document.id);\n\n    if (pos < 0) {\n      return;\n    }\n\n    // delete from database\n    this.http.delete('http://127.0.0.1:4200/documents/' + document.id)\n      .subscribe(\n        () => {\n          this.documents.splice(pos, 1);\n          this.sortAndSend();\n        }\n      );\n  }\n\n  // addDocument(newDocument: Document) {\n\n  //   if (newDocument === null || newDocument === undefined) {\n\n  //     return;\n  //   }\n\n  //   this.maxDocumentId++;\n  //   newDocument.id = this.maxDocumentId.toString();\n  //   this.documents.push(newDocument);\n  //   this.storeDocuments();\n  // }\n\n  addDocument(document: Document) {\n    if (!document) {\n      return;\n    }\n\n    // make sure id of the new Document is empty\n    document.id = '';\n\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    // add to database\n    this.http.post<{ message: string, document: Document }>('http://127.0.0.1:4200/documents/',\n      document,\n      { headers: headers })\n      .subscribe(\n        (responseData) => {\n          // add new document to documents\n          this.documents.push(responseData.document);\n          this.sortAndSend();\n        }\n      );\n  }\n\n  // updateDocument(originalDocument: Document, newDocument: Document) {\n\n  //   if (originalDocument === null || originalDocument === undefined || newDocument === null || newDocument === undefined) {\n  //     return;\n  //   }\n\n  //   const pos = this.documents.indexOf(originalDocument)\n  //   if (pos < 0) {\n  //     return\n  //   }\n  //   newDocument.id = originalDocument.id\n  //   this.documents[pos] = newDocument\n  //   this.storeDocuments();\n\n  // }\n\n\n  updateDocument(originalDocument: Document, newDocument: Document) {\n    if (!originalDocument || !newDocument) {\n      return;\n    }\n\n    const pos = this.documents.findIndex(d => d.id === originalDocument.id);\n\n    if (pos < 0) {\n      return;\n    }\n\n    // set the id of the new Document to the id of the old Document\n    newDocument.id = originalDocument.id;\n\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    // update database\n    this.http.put('http://127.0.0.1:4200/documents/' + originalDocument.id,\n      newDocument, { headers: headers })\n      .subscribe(\n        () => {\n          this.documents[pos] = newDocument;\n          this.documents.sort((a, b) => a.name < b.name ? -1 : 0);\n          this.documentListChangedEvent.next(this.documents.slice());\n        }\n      );\n  }\n\n\n  storeDocuments() {\n    let documents = JSON.stringify(this.documents);\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    // this.http.put('https://cms-wdd430-58d60-default-rtdb.firebaseio.com/documents.json', documents, { headers: headers })\n\n    this.http.put('http://127.0.0.1:4200/documents/', documents, { headers: headers })\n      .subscribe(\n        () => {\n\n          this.documentListChangedEvent.next(this.documents.slice());\n        }\n      )\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}