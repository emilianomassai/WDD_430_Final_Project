{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ContactEditComponent = class ContactEditComponent {\n  constructor(contactService, router, route) {\n    this.contactService = contactService;\n    this.router = router;\n    this.route = route;\n    this.groupContacts = [];\n    this.editMode = false;\n    this.hasGroup = false;\n  }\n  ngOnInit() {\n    // this.route.params.subscribe(\n    //   (params: Params) => {\n    //     const id = params['id'];\n    //     if (!id) {\n    //       this.editMode = false;\n    //       return;\n    //     }\n    //     this.originalContact = this.contactService.getContact(id);\n    //     if (!this.originalContact) {\n    //       return;\n    //     }\n    //     this.editMode = true;\n    //     this.contact = JSON.parse(JSON.stringify(this.originalContact));\n    //     // if (this.contact.group !== null && this.contact.group !== undefined) {\n    //     //   this.hasGroup = true;\n    //     //   this.groupContacts = [...this.contact.group];\n    //     // }\n    //   }\n    // )\n  }\n  onCancel() {\n    this.router.navigate(['/contacts'], {\n      relativeTo: this.route\n    });\n  }\n  onSubmit(form) {\n    // const values = form.value;\n    // const newContact = new Contact('', values.name, values.email, values.phone, values.imageUrl, this.groupContacts);\n    // if (this.editMode === true) {\n    //   this.contactService.updateContact(this.originalContact, newContact);\n    // } else {\n    //   this.contactService.addContact(newContact);\n    // }\n    this.router.navigate(['/contacts'], {\n      relativeTo: this.route\n    });\n  }\n  isInvalidContact(newContact) {\n    // if (!newContact) {\n    //   return true;\n    // }\n    // if (newContact.id === this.contact.id) {\n    //   return true;\n    // }\n    // for (let i = 0; i < this.groupContacts.length; i++) {\n    //   if (newContact.id === this.groupContacts[i].id) {\n    //     return true;\n    //   }\n    // }\n    // return false;\n  }\n  addToGroup($event) {\n    // const selectedContact: Contact = $event.dragData;\n    // this.invalidGroupContact = this.isInvalidContact(selectedContact);\n    // if (this.invalidGroupContact) {\n    //   console.log('Not valid!')\n    //   return;\n    // }\n    // this.groupContacts.push(selectedContact);\n    // this.invalidGroupContact = false;\n  }\n  onRemoveItem(id) {\n    // if (id < 0 || id >= this.groupContacts.length) {\n    //   return;\n    // }\n    // this.groupContacts.splice(id, 1);\n    // this.invalidGroupContact = false;\n  }\n};\nContactEditComponent = __decorate([Component({\n  selector: 'app-contact-edit',\n  templateUrl: './contact-edit.component.html',\n  styleUrls: ['./contact-edit.component.css']\n})], ContactEditComponent);\nexport { ContactEditComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAa1C,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAa/BC,YAAoBC,cAA8B,EAAUC,MAAc,EAAUC,KAAqB;IAArF,mBAAc,GAAdF,cAAc;IAA0B,WAAM,GAANC,MAAM;IAAkB,UAAK,GAALC,KAAK;IAPzF,kBAAa,GAAc,EAAE;IAE7B,aAAQ,GAAY,KAAK;IACzB,aAAQ,GAAY,KAAK;EAIoF;EAE7GC,QAAQ;IACN;IACA;IAEA;IAGA;IAEA;IACA;IACA;IAIA;IAGA;IAEA;IACA;IAGA;IAEA;IAGA;IAEA;IAIA;IACA;IACA;IACA;EAAA;EAGFC,QAAQ;IACN,IAAI,CAACH,MAAM,CAACI,QAAQ,CAAC,CAAC,WAAW,CAAC,EAAE;MAAEC,UAAU,EAAE,IAAI,CAACJ;IAAK,CAAE,CAAC;EACjE;EAEAK,QAAQ,CAACC,IAAY;IAEnB;IAGA;IAGA;IAEA;IACA;IAEA;IACA;IAGA,IAAI,CAACP,MAAM,CAACI,QAAQ,CAAC,CAAC,WAAW,CAAC,EAAE;MAAEC,UAAU,EAAE,IAAI,CAACJ;IAAK,CAAE,CAAC;EACjE;EAGAO,gBAAgB,CAACC,UAAmB;IAElC;IAEA;IACA;IAIA;IAEA;IACA;IAGA;IAEA;IAEA;IACA;IACA;IAGA;EAAA;EAIFC,UAAU,CAACC,MAAW;IAEpB;IAEA;IAEA;IAEA;IACA;IACA;IAEA;IAEA;EAAA;EAIFC,YAAY,CAACC,EAAU;IAErB;IAEA;IACA;IAGA;IAEA;EAAA;CAGH;AA5IYhB,oBAAoB,eALhCD,SAAS,CAAC;EACTkB,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,GACWnB,oBAAoB,CA4IhC;SA5IYA,oBAAoB","names":["Component","ContactEditComponent","constructor","contactService","router","route","ngOnInit","onCancel","navigate","relativeTo","onSubmit","form","isInvalidContact","newContact","addToGroup","$event","onRemoveItem","id","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/emilianomassai/Documents/GitHub/WDD_430_Final_Project/cms/src/app/trendingMovies/trendingMovie-edit/trendingMovie-edit.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Contact } from '../trendingMovies.model';\nimport { ContactService } from '../trendingMovie.service';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { NgForm } from '@angular/forms';\n\n\n\n@Component({\n  selector: 'app-contact-edit',\n  templateUrl: './contact-edit.component.html',\n  styleUrls: ['./contact-edit.component.css']\n})\nexport class ContactEditComponent implements OnInit {\n  validContact!: boolean;\n\n  contact!: Contact;\n  originalContact!: Contact;\n\n  groupContacts: Contact[] = [];\n\n  editMode: boolean = false;\n  hasGroup: boolean = false;\n  invalidGroupContact!: boolean;\n\n\n  constructor(private contactService: ContactService, private router: Router, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    // this.route.params.subscribe(\n    //   (params: Params) => {\n\n    //     const id = params['id'];\n\n\n    //     if (!id) {\n\n    //       this.editMode = false;\n    //       return;\n    //     }\n\n\n\n    //     this.originalContact = this.contactService.getContact(id);\n\n\n    //     if (!this.originalContact) {\n\n    //       return;\n    //     }\n\n\n    //     this.editMode = true;\n\n    //     this.contact = JSON.parse(JSON.stringify(this.originalContact));\n\n\n    //     // if (this.contact.group !== null && this.contact.group !== undefined) {\n\n    //     //   this.hasGroup = true;\n\n\n\n    //     //   this.groupContacts = [...this.contact.group];\n    //     // }\n    //   }\n    // )\n  }\n\n  onCancel() {\n    this.router.navigate(['/contacts'], { relativeTo: this.route });\n  }\n\n  onSubmit(form: NgForm) {\n\n    // const values = form.value;\n\n\n    // const newContact = new Contact('', values.name, values.email, values.phone, values.imageUrl, this.groupContacts);\n\n\n    // if (this.editMode === true) {\n\n    //   this.contactService.updateContact(this.originalContact, newContact);\n    // } else {\n\n    //   this.contactService.addContact(newContact);\n    // }\n\n\n    this.router.navigate(['/contacts'], { relativeTo: this.route });\n  }\n\n\n  isInvalidContact(newContact: Contact) {\n\n    // if (!newContact) {\n\n    //   return true;\n    // }\n\n\n\n    // if (newContact.id === this.contact.id) {\n\n    //   return true;\n    // }\n\n\n    // for (let i = 0; i < this.groupContacts.length; i++) {\n\n    //   if (newContact.id === this.groupContacts[i].id) {\n\n    //     return true;\n    //   }\n    // }\n\n\n    // return false;\n  }\n\n\n  addToGroup($event: any) {\n\n    // const selectedContact: Contact = $event.dragData;\n\n    // this.invalidGroupContact = this.isInvalidContact(selectedContact);\n\n    // if (this.invalidGroupContact) {\n\n    //   console.log('Not valid!')\n    //   return;\n    // }\n\n    // this.groupContacts.push(selectedContact);\n\n    // this.invalidGroupContact = false;\n  }\n\n\n  onRemoveItem(id: number) {\n\n    // if (id < 0 || id >= this.groupContacts.length) {\n\n    //   return;\n    // }\n\n\n    // this.groupContacts.splice(id, 1);\n\n    // this.invalidGroupContact = false;\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}