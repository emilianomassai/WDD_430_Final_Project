{"ast":null,"code":"import { EventEmitter } from '@angular/core';\n// import { MOCKCONTACTS } from './MOCKCONTACTS';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContactService {\n  constructor(http) {\n    this.http = http;\n    this.contactChangedEvent = new EventEmitter();\n    this.contactListChangedEvent = new Subject();\n    this.data = [];\n    this.topRated = [];\n    this.contacts = [];\n    // this.contacts = MOCKCONTACTS;\n    // this.getContacts();\n    this.maxContactId = this.getMaxId();\n  }\n  findTrending() {\n    return this.http.get('https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd');\n  }\n  getContacts() {\n    // this.http.get<Contact[]>('https://cms-wdd430-58d60-default-rtdb.firebaseio.com/contacts.json')\n    this.http.get('http://127.0.0.1:4200/contacts').subscribe(contactsData => {\n      this.contacts = contactsData.contacts;\n      this.maxContactId = this.getMaxId();\n      console.log(contactsData.contacts);\n      // this.contacts.sort((a, b) => (a.name < b.name) ? 1 : (a.name > b.name) ? -1 : 0);\n      this.contactListChangedEvent.next(this.contacts.slice());\n      error => {\n        console.log(error);\n      };\n    });\n  }\n  // getContacts(): Contact[] { return this.contacts.slice(); }\n  getContact(id) {\n    // for (const contact of this.contacts) {\n    //   if (contact.id === id) {\n    //     return contact;\n    //   }\n    // }\n    const url = 'https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd';\n    this.http.get(url).subscribe(res => {\n      this.data = res;\n      this.topRated = this.data.results;\n      // TODO !!!\n      // here is the list of movies .. needs to use this to display the movies on the page\n      // for (let i = 0; i < topRated.length; i++) {\n      //   if (topRated[i].id === id) {\n      //     console.log(\"Results from contact Service : \" + topRated[i])\n      //     // return topRated;\n      //   }\n      // }\n      for (let i = 0; i < this.topRated.length; i++) {\n        if (this.topRated[i].id == id) {\n          console.log(\"Movie selected\");\n          console.log(\"Id: \" + this.topRated[i].id);\n          console.log(\"Title: \" + this.topRated[i].title);\n          console.log(\"Overview: \" + this.topRated[i].overview);\n          console.log(\"Poster: \" + this.topRated[i].poster_path);\n          console.log(\"Vote: \" + this.topRated[i].vote_average);\n          console.log(\"Release: \" + this.topRated[i].release_date);\n          console.log('topRated[i]: ' + this.topRated[i]);\n          return this.topRated[i];\n        }\n      }\n    });\n    return null;\n  }\n  getMaxId() {\n    let maxId = 0;\n    for (const contact of this.contacts) {\n      const currentId = +contact.id;\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n  addContact(newContact) {\n    if (newContact === null || newContact === undefined) {\n      return;\n    }\n    // this.maxContactId++;\n    // newContact.id = this.maxContactId.toString();\n    // this.contacts.push(newContact);\n    // this.storeContacts();\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    newContact.id = '';\n    const strContact = JSON.stringify(newContact);\n    this.http.post('http://127.0.0.1:4200/contacts/', strContact, {\n      headers: headers\n    }).subscribe(() => {\n      this.contactChangedEvent.next(this.contacts.slice());\n    });\n  }\n  updateContact(originalContact, newContact) {\n    if (!originalContact || !newContact) {\n      return;\n    }\n    const pos = this.contacts.findIndex(c => c.id === originalContact.id);\n    // const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n    newContact.id = originalContact.id;\n    // newContact.id = originalContact.id;\n    // this.contacts[pos] = newContact;\n    // this.storeContacts();\n    //set headers\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // const strContact = JSON.stringify(newContact);\n    this.http.patch('http://127.0.0.1:4200/contacts/' + originalContact.id, newContact, {\n      headers: headers\n    }).subscribe(() => {\n      this.contacts[pos] = newContact;\n      this.contactListChangedEvent.next(this.contacts.slice());\n    });\n  }\n  deleteContact(contact) {\n    // if (contact === null || contact === undefined) {\n    //   return;\n    // }\n    // const pos = this.contacts.indexOf(contact);\n    // if (pos < 0) {\n    //   return;\n    // }\n    // // this.contacts.splice(pos, 1);\n    // // this.storeContacts();\n    // this.http.delete('http://127.0.0.1:4200/contacts/' + contact.id)\n    //   .subscribe(\n    //     () => {\n    //       this.contactListChangedEvent.next(this.contacts.slice());\n    //     });\n  }\n  storeContacts() {\n    let contacts = JSON.stringify(this.contacts);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.http.put('https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd', contacts, {\n      headers: headers\n    }).subscribe(() => {\n      this.contactListChangedEvent.next(this.contacts.slice());\n    });\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient));\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","HttpHeaders","Subject","ContactService","constructor","http","maxContactId","getMaxId","findTrending","get","getContacts","subscribe","contactsData","contacts","console","log","contactListChangedEvent","next","slice","error","getContact","id","url","res","data","topRated","results","i","length","title","overview","poster_path","vote_average","release_date","maxId","contact","currentId","addContact","newContact","undefined","headers","strContact","JSON","stringify","post","contactChangedEvent","updateContact","originalContact","pos","findIndex","c","patch","deleteContact","storeContacts","put","factory","providedIn"],"sourceRoot":"","sources":["/Users/emilianomassai/Documents/GitHub/WDD_430_Final_Project/cms/src/app/contacts/contact.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\n// import { MOCKCONTACTS } from './MOCKCONTACTS';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Contact } from './contacts.model';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactService {\n  contactChangedEvent = new EventEmitter<Contact[]>();\n\n  contactListChangedEvent = new Subject<Contact[]>();\n\n  maxContactId: number;\n  public data: any = [];\n  public topRated: any = [];\n\n  private contacts: Contact[] = [];\n\n  constructor(private http: HttpClient) {\n    // this.contacts = MOCKCONTACTS;\n    // this.getContacts();\n    this.maxContactId = this.getMaxId();\n  }\n\n\n  findTrending() {\n    return this.http.get('https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd');\n\n  }\n\n  getContacts() {\n\n    // this.http.get<Contact[]>('https://cms-wdd430-58d60-default-rtdb.firebaseio.com/contacts.json')\n    this.http.get<{ message: string; contacts: Contact[] }>('http://127.0.0.1:4200/contacts')\n      .subscribe(\n        (contactsData) => {\n          this.contacts = contactsData.contacts;\n          this.maxContactId = this.getMaxId();\n          console.log(contactsData.contacts)\n\n          // this.contacts.sort((a, b) => (a.name < b.name) ? 1 : (a.name > b.name) ? -1 : 0);\n          this.contactListChangedEvent.next(this.contacts.slice());\n\n          (error: any) => {\n            console.log(error);\n          }\n        })\n  }\n\n  // getContacts(): Contact[] { return this.contacts.slice(); }\n\n\n  getContact(id: string): Contact {\n    // for (const contact of this.contacts) {\n    //   if (contact.id === id) {\n    //     return contact;\n    //   }\n    // }\n\n\n    const url = 'https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd'\n    this.http.get(url).subscribe((res) => {\n      this.data = res\n      this.topRated = this.data.results\n      // TODO !!!\n      // here is the list of movies .. needs to use this to display the movies on the page\n\n      // for (let i = 0; i < topRated.length; i++) {\n      //   if (topRated[i].id === id) {\n      //     console.log(\"Results from contact Service : \" + topRated[i])\n      //     // return topRated;\n\n      //   }\n      // }\n\n\n      for (let i = 0; i < this.topRated.length; i++) {\n        if (this.topRated[i].id == id) {\n\n          console.log(\"Movie selected\")\n          console.log(\"Id: \" + this.topRated[i].id)\n          console.log(\"Title: \" + this.topRated[i].title)\n          console.log(\"Overview: \" + this.topRated[i].overview)\n          console.log(\"Poster: \" + this.topRated[i].poster_path)\n          console.log(\"Vote: \" + this.topRated[i].vote_average)\n          console.log(\"Release: \" + this.topRated[i].release_date)\n\n          console.log('topRated[i]: ' + this.topRated[i]);\n          return this.topRated[i];\n\n\n        }\n      }\n    })\n\n    return null!;\n\n  }\n\n\n  getMaxId(): number {\n    let maxId = 0;\n    for (const contact of this.contacts) {\n      const currentId = +contact.id;\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n\n  addContact(newContact: Contact) {\n    if (newContact === null || newContact === undefined) {\n      return;\n    }\n\n    // this.maxContactId++;\n    // newContact.id = this.maxContactId.toString();\n    // this.contacts.push(newContact);\n    // this.storeContacts();\n\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    newContact.id = '';\n    const strContact = JSON.stringify(newContact);\n\n    this.http.post('http://127.0.0.1:4200/contacts/', strContact, { headers: headers })\n      .subscribe(\n        () => {\n          this.contactChangedEvent.next(this.contacts.slice());\n        });\n  }\n\n  updateContact(originalContact: Contact, newContact: Contact) {\n    if (!originalContact || !newContact) {\n      return;\n    }\n\n    const pos = this.contacts.findIndex(c => c.id === originalContact.id);\n\n    // const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n\n    newContact.id = originalContact.id;\n\n    // newContact.id = originalContact.id;\n    // this.contacts[pos] = newContact;\n    // this.storeContacts();\n    //set headers\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    // const strContact = JSON.stringify(newContact);\n\n    this.http.patch('http://127.0.0.1:4200/contacts/' + originalContact.id\n      , newContact, { headers: headers })\n      .subscribe(\n        () => {\n          this.contacts[pos] = newContact;\n          this.contactListChangedEvent.next(this.contacts.slice());\n        });\n  }\n\n  deleteContact(contact: Contact) {\n    // if (contact === null || contact === undefined) {\n    //   return;\n    // }\n    // const pos = this.contacts.indexOf(contact);\n\n    // if (pos < 0) {\n    //   return;\n    // }\n    // // this.contacts.splice(pos, 1);\n    // // this.storeContacts();\n    // this.http.delete('http://127.0.0.1:4200/contacts/' + contact.id)\n    //   .subscribe(\n    //     () => {\n    //       this.contactListChangedEvent.next(this.contacts.slice());\n    //     });\n\n  }\n\n  storeContacts() {\n    let contacts = JSON.stringify(this.contacts);\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    this.http.put('https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd', contacts, { headers: headers })\n      .subscribe(\n        () => {\n          this.contactListChangedEvent.next(this.contacts.slice());\n        }\n      )\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}