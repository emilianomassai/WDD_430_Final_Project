{"ast":null,"code":"import { EventEmitter } from '@angular/core';\n// import { MOCKCONTACTS } from './MOCKCONTACTS';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContactService {\n  constructor(http) {\n    this.http = http;\n    this.contactChangedEvent = new EventEmitter();\n    this.contactListChangedEvent = new Subject();\n    this.contacts = [];\n    // this.contacts = MOCKCONTACTS;\n    // this.getContacts();\n    this.maxContactId = this.getMaxId();\n  }\n  findTrending() {\n    return this.http.get('https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd');\n  }\n  getContacts() {\n    // this.http.get<Contact[]>('https://cms-wdd430-58d60-default-rtdb.firebaseio.com/contacts.json')\n    // this.http.get<{ message: string; contacts: Contact[] }>('http://127.0.0.1:4200/contacts')\n    //   .subscribe(\n    //     (contactsData) => {\n    //       this.contacts = contactsData.contacts;\n    //       this.maxContactId = this.getMaxId();\n    //       console.log(contactsData.contacts)\n    //       // this.contacts.sort((a, b) => (a.name < b.name) ? 1 : (a.name > b.name) ? -1 : 0);\n    //       this.contactListChangedEvent.next(this.contacts.slice());\n    //       (error: any) => {\n    //         console.log(error);\n    //       }\n    //     })\n    return this.http.get('https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd');\n  }\n  // getContacts(): Contact[] { return this.contacts.slice(); }\n  getContact(id) {\n    for (const contact of this.contacts) {\n      if (contact.id === id) {\n        return contact;\n      }\n    }\n    return null;\n  }\n  getMaxId() {\n    let maxId = 0;\n    for (const contact of this.contacts) {\n      const currentId = +contact.id;\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n  addContact(newContact) {\n    if (newContact === null || newContact === undefined) {\n      return;\n    }\n    // this.maxContactId++;\n    // newContact.id = this.maxContactId.toString();\n    // this.contacts.push(newContact);\n    // this.storeContacts();\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    newContact.id = '';\n    const strContact = JSON.stringify(newContact);\n    this.http.post('http://127.0.0.1:4200/contacts/', strContact, {\n      headers: headers\n    }).subscribe(() => {\n      this.contactChangedEvent.next(this.contacts.slice());\n    });\n  }\n  updateContact(originalContact, newContact) {\n    if (!originalContact || !newContact) {\n      return;\n    }\n    const pos = this.contacts.findIndex(c => c.id === originalContact.id);\n    // const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n    newContact.id = originalContact.id;\n    // newContact.id = originalContact.id;\n    // this.contacts[pos] = newContact;\n    // this.storeContacts();\n    //set headers\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // const strContact = JSON.stringify(newContact);\n    this.http.patch('http://127.0.0.1:4200/contacts/' + originalContact.id, newContact, {\n      headers: headers\n    }).subscribe(() => {\n      this.contacts[pos] = newContact;\n      this.contactListChangedEvent.next(this.contacts.slice());\n    });\n  }\n  deleteContact(contact) {\n    if (contact === null || contact === undefined) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n      return;\n    }\n    // this.contacts.splice(pos, 1);\n    // this.storeContacts();\n    this.http.delete('http://127.0.0.1:4200/contacts/' + contact.id).subscribe(() => {\n      this.contactListChangedEvent.next(this.contacts.slice());\n    });\n  }\n  storeContacts() {\n    let contacts = JSON.stringify(this.contacts);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.http.put('https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd', contacts, {\n      headers: headers\n    }).subscribe(() => {\n      this.contactListChangedEvent.next(this.contacts.slice());\n    });\n  }\n}\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient));\n};\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","HttpHeaders","Subject","ContactService","constructor","http","maxContactId","getMaxId","findTrending","get","getContacts","getContact","id","contact","contacts","maxId","currentId","addContact","newContact","undefined","headers","strContact","JSON","stringify","post","subscribe","contactChangedEvent","next","slice","updateContact","originalContact","pos","findIndex","c","patch","contactListChangedEvent","deleteContact","indexOf","delete","storeContacts","put","factory","providedIn"],"sourceRoot":"","sources":["/Users/emilianomassai/Documents/GitHub/WDD_430_Final_Project/cms/src/app/contacts/contact.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\n// import { MOCKCONTACTS } from './MOCKCONTACTS';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Contact } from './contacts.model';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactService {\n  contactChangedEvent = new EventEmitter<Contact[]>();\n\n  contactListChangedEvent = new Subject<Contact[]>();\n\n  maxContactId: number;\n\n  private contacts: Contact[] = [];\n\n  constructor(private http: HttpClient) {\n    // this.contacts = MOCKCONTACTS;\n    // this.getContacts();\n    this.maxContactId = this.getMaxId();\n  }\n\n\n  findTrending() {\n    return this.http.get('https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd');\n\n  }\n\n  getContacts() {\n\n    // this.http.get<Contact[]>('https://cms-wdd430-58d60-default-rtdb.firebaseio.com/contacts.json')\n    // this.http.get<{ message: string; contacts: Contact[] }>('http://127.0.0.1:4200/contacts')\n    //   .subscribe(\n    //     (contactsData) => {\n    //       this.contacts = contactsData.contacts;\n    //       this.maxContactId = this.getMaxId();\n    //       console.log(contactsData.contacts)\n\n    //       // this.contacts.sort((a, b) => (a.name < b.name) ? 1 : (a.name > b.name) ? -1 : 0);\n    //       this.contactListChangedEvent.next(this.contacts.slice());\n\n    //       (error: any) => {\n    //         console.log(error);\n    //       }\n    //     })\n    return this.http.get('https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd');\n\n  }\n\n  // getContacts(): Contact[] { return this.contacts.slice(); }\n\n\n  getContact(id: string): Contact {\n    for (const contact of this.contacts) {\n      if (contact.id === id) {\n        return contact;\n      }\n    }\n    return null!;\n\n  }\n\n  getMaxId(): number {\n    let maxId = 0;\n    for (const contact of this.contacts) {\n      const currentId = +contact.id;\n      if (currentId > maxId) {\n        maxId = currentId;\n      }\n    }\n    return maxId;\n  }\n\n  addContact(newContact: Contact) {\n    if (newContact === null || newContact === undefined) {\n      return;\n    }\n\n    // this.maxContactId++;\n    // newContact.id = this.maxContactId.toString();\n    // this.contacts.push(newContact);\n    // this.storeContacts();\n\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    newContact.id = '';\n    const strContact = JSON.stringify(newContact);\n\n    this.http.post('http://127.0.0.1:4200/contacts/', strContact, { headers: headers })\n      .subscribe(\n        () => {\n          this.contactChangedEvent.next(this.contacts.slice());\n        });\n  }\n\n  updateContact(originalContact: Contact, newContact: Contact) {\n    if (!originalContact || !newContact) {\n      return;\n    }\n\n    const pos = this.contacts.findIndex(c => c.id === originalContact.id);\n\n    // const pos = this.contacts.indexOf(originalContact);\n    if (pos < 0) {\n      return;\n    }\n\n    newContact.id = originalContact.id;\n\n    // newContact.id = originalContact.id;\n    // this.contacts[pos] = newContact;\n    // this.storeContacts();\n    //set headers\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    // const strContact = JSON.stringify(newContact);\n\n    this.http.patch('http://127.0.0.1:4200/contacts/' + originalContact.id\n      , newContact, { headers: headers })\n      .subscribe(\n        () => {\n          this.contacts[pos] = newContact;\n          this.contactListChangedEvent.next(this.contacts.slice());\n        });\n  }\n\n  deleteContact(contact: Contact) {\n    if (contact === null || contact === undefined) {\n      return;\n    }\n    const pos = this.contacts.indexOf(contact);\n\n    if (pos < 0) {\n      return;\n    }\n    // this.contacts.splice(pos, 1);\n    // this.storeContacts();\n    this.http.delete('http://127.0.0.1:4200/contacts/' + contact.id)\n      .subscribe(\n        () => {\n          this.contactListChangedEvent.next(this.contacts.slice());\n        });\n\n  }\n\n  storeContacts() {\n    let contacts = JSON.stringify(this.contacts);\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    this.http.put('https://api.themoviedb.org/3/trending/all/day?api_key=f4ec058abc3d746728270f736f4851fd', contacts, { headers: headers })\n      .subscribe(\n        () => {\n          this.contactListChangedEvent.next(this.contacts.slice());\n        }\n      )\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}